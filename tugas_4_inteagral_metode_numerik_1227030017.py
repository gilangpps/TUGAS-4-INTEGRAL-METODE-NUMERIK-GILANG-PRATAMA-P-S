# -*- coding: utf-8 -*-
"""Tugas 4-Inteagral Metode Numerik-1227030017.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1doYS15EnXrWiiSnq3V0oPhxyowqqP9t6
"""

# Nama   : Gilang Pratama Putra Siswanto
# NIM    : 1227030017
# Tugas 4 Inteagral Metode Numerik - Praktikum Fisika Komputasi

import numpy as np
import matplotlib.pyplot as plt

# Integral Eksak

def func(x):
    return ((x**(-3))+np.cos(x))
a = 1.0
b = 5.0

# metode trapezoid

n = 1000
dx = (b-a)/(n-1)
x = np.linspace(a,b,n)

sigma = 0
for i in range (1, n-1):
  sigma += func(x[i])


hasil = 0.5*dx*(func(x[0])+2*sigma+func(x[-1]))

print("Hasil Metode Trapezoid   :", hasil)

xp=np.linspace(a,b,1000000)
plt.plot(xp,func(xp))
plt.show()

xp=np.linspace(a,b,1000000)
plt.plot(xp,func(xp))

for i in range (n):
    plt.bar(x[i], func(x[i]), align = 'edge', width = 0.000001, edgecolor='black', alpha = 0.7)

plt.show()

xp=np.linspace(a,b,1000000)
plt.plot(xp,func(xp))

for i in range (n):
    plt.bar(x[i], func(x[i]), align = 'edge', width = 0.000001, edgecolor='black')

plt.fill_between(x, func(x), color = 'red', alpha = 0.3)
plt.show()

# Simpson Punya Aturan 1/3
if n % 2 == 0:
    n += 1

x = np.linspace(a, b, n)
dx = (x[-1] - x[0]) / (n - 1)


hasil1 = func(x[0]) + func(x[-1])

for i in range(1, n-1, 2):
    hasil1 += 4 * func(x[i])

for i in range(2, n-2, 2):
    hasil1 += 2 * func(x[i])

hasil1 *= dx / 3


xp = np.linspace(a, b, 1000)
plt.plot(xp, func(xp))

for i in range(n):
    plt.bar(x[i], func(x[i]), align='edge', width=dx, color='red', edgecolor='black')
plt.show()

print("Hasil Metode Simpson 1/3   :", hasil1)